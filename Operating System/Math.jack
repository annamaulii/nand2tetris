// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
	static Array exponential;
    /** Initializes the library. */
    function void init() {
		let exponential = Memory.alloc(16);
		let exponential[0] = 1;
		let exponential[1] = 2;
		let exponential[2] = 4;
		let exponential[3] = 8;
		let exponential[4] = 16;
		let exponential[5] = 32;
		let exponential[6] = 64;
		let exponential[7] = 128;
		let exponential[8] = 256;
		let exponential[9] = 512;
		let exponential[10] = 1024;
		let exponential[11] = 2048;
		let exponential[12] = 4096;
		let exponential[13] = 8192;
		let exponential[14] = 16384;
		let exponential[15] = exponential[14] + exponential[14];

		return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
		if (x < 0) 
		{
			let x = -x;
		}
		return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
		var int z, n;
		let n = 0;
		let z = 0;	
		while (n < 16) 
		{
			if (~((y&exponential[n] )= 0)) 
			{
				let z = z + x;
			}
			let n = n + 1;
			let x = x + x;
		}
		return z;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
		var int positiveResult;
		let positiveResult = Math.divide2(Math.abs(x), Math.abs(y));
		if (((x<0) & (y>0)) | ((y<0) & (x>0))) 
		{
			return -positiveResult;
		}
		return positiveResult;
    }

    function int divide2(int x, int y) {
		var int q;
		if (y>x)  
		{
			return 0;
		}
		let q = Math.divide2(x ,(y+y));
		if ((x - ((q+q)*y)) < y)
		{
			return q+q;
		}
		else
		{
			return q+q+1;
		}
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
		var int y, j, tmp;
		let j = 7;
		let y = 0;
		while (~(j<0))
		{
			let tmp = y + exponential[j];
			if (tmp < 182) {
				if (~((tmp*tmp) > x))
				{
					let y = tmp;
				}
			}
			let j = j - 1;
		}
		return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
		if (a < b) 
		{
			return b;
		}
		else 
		{
			return a;
		}
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
		if (a < b) 
		{
			return a;
		}
		else 
		{
			return b;
		}
    }
}
