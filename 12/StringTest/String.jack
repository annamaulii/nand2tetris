// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
	field Array stringArray;
	field int length, MaxLength;
	static Array ascii;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
		let length = 0;
		let MaxLength = maxLength;
		if (maxLength > 0)
		{
			let stringArray = Array.new(maxLength);
		}
		return this;
    }

    /** Disposes this string. */
    method void dispose() {
		if (MaxLength > 0){
		do stringArray.dispose();}		
		do Memory.deAlloc(this);
		return;
    }

    /** Returns the current length of this string. */
    method int length() {
		return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
		return stringArray[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
		let stringArray[j] = c;
		return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
		let stringArray[length] = c;
		let length = length + 1;
		return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
		let length = length - 1;
		return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
		var int v, i, d;
		let v = 0;
		let i = 0;
		if (stringArray[0] = 45) 
		{
			let i = i + 1;
		}
		while (i < length)
		{
			let d = stringArray[i] - 48;
			let v = (v * 10) + d;
			let i = i + 1;
		}
		
		if (stringArray[0] = 45) 
		{
			return -v;
		}
		return v;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
		var int c;
		var String s;
		var boolean nNeg;
		let nNeg = (val<0);
		let val = Math.abs(val);
		let s = String.int2String(val);
		let length = 0;
		if (nNeg)
		{
			do appendChar(45);	
		}
		let c = 0;
		while (c < s.length())
		{
			do appendChar(s.charAt(c));
			let c = c + 1;
		}
		return; 
    }    
	function String int2String(int n) {
		var int c, lastDigit, i;
		var String ret, newStr;
		let lastDigit = n - ((n/10)*10); 
		let c = lastDigit + 48;
		if (n < 10)
		{
			let ret = String.new(1);
			do ret.appendChar(c);
			return ret;
		}
		else 
		{
			let ret = String.int2String(n/10);
			let newStr = String.new(ret.length() + 1);
			let i = 0;
			while (i < ret.length())
			{
				do newStr.appendChar(ret.charAt(i));
				let i = i + 1;
			}
			return newStr.appendChar(c);
		}	
    }

    /** Returns the new line character. */
    function char newLine() {
		return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
		return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
		return 34;
    }
}
